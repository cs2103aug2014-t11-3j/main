//@author: a0111608r



	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\history\InputHistory.java
	 */

public class InputHistory {
	private LinkedList<String> _strings;
	private int _position;
	public InputHistory() {
		_strings = new LinkedList<String>();
		_position = -1;
	}
	
	public boolean addInput (String string) {
		_position = _strings.size();
		return _strings.add(string);
	}
	public String getBackwards() throws Exception {
		if (_position >= 0) {
			String toBeReShown = _strings.get(_position);
			_position--;
			return toBeReShown;
		} else {
			if (_strings.size() == 0) {
				return "";
			} else {
				return _strings.get(0);
			}
		}
	}
	public void goBackwards() throws Exception {
		if (_position >= 0) {
			_position--;
		} else {
			throw new Exception("No commands to undo!");
		}
	}
	public String getForwards() throws Exception {
		if (_position < _strings.size()-1) {
			String toBeReShown = _strings.get(_position+1);
			_position++;
			return toBeReShown;
		} else {
			return null;
		}
	}
	public void goForwards() throws Exception {
		_position++;
		if (_position >= _strings.size()) {
			_position--;
			throw new Exception("No commands to redo!");
		}
	}
	
}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\history\InputHistory.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\CommandParser.java
	 */

	public static String getTheRestOfTheString(String userCommand) throws Exception {
		try {
			String[] result = userCommand.split(" ", 2);
			String restOfTheWord = result[1];
			return restOfTheWord;
		} catch (ArrayIndexOutOfBoundsException aioobe) {
			Log.trace("Rest Of The String is null",aioobe);
			return null;
		}
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\CommandParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\CommandParser.java
	 */

	public static String getFirstWord(String userCommand) {
		String[] result = userCommand.split(" ", 2);
		String firstWord = result[0];
		return firstWord;
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\CommandParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static String[] generateArray(String parameter){
		parameter = parameter.trim();
		String[] array = parameter.split(SINGLE_SPACE);
		return array;
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	public static int parseTaskEndTime(String parameter) throws Exception {
		String [] messageArray = generateArray(parameter);

		for (int i = 0; i<=messageArray.length-1; i++) {
			if ((isValidKeyWordEnding(messageArray[i], messageArray, i))) {
				for (int j=i+1; j<=messageArray.length-1; j++) {
					if (isValidKeyWordAt(messageArray[j], messageArray, j)
							&& isInteger(messageArray[j+1])) {
						try {
							int endTime = Integer.parseInt(messageArray[j+1]);
							if (endTime >= 0000 && endTime <= 2359) {
								return endTime;
							} else {
								return 2359;
							}
						} catch (NumberFormatException nfe) {
							throw new Exception("Invalid Time Format");
						} 
					}
				}
			} else if ((isValidKeyWordDeadline(messageArray[i], messageArray, i))) {
				for (int j=i+1; j<=messageArray.length-1; j++) {
					if (isValidKeyWordAt(messageArray[j], messageArray, j)
							&& isInteger(messageArray[j+1])) {
						try {
							int endTime = Integer.parseInt(messageArray[j+1]);
							if (endTime >= 0000 && endTime <= 2359) {
								return endTime;
							} else {
								return 2359;
							}
						} catch (NumberFormatException nfe) {
							throw new Exception("Invalid Time Format");
						} 
					}
				}
			} else if ((isValidKeyWordStart(messageArray[i], messageArray, i))
					|| (isValidKeyWordStart_2(messageArray[i], messageArray, i))) {
				for (int j=i+1; j<=messageArray.length-1; j++) {
					if ((isValidKeyWordEnding(messageArray[j], messageArray, j))
							&& isInteger(messageArray[j+1])
							&& messageArray[j+1].length() == 4) {
						try {
							int endTime = Integer.parseInt(messageArray[j+1]);
							if (endTime >= 0000 && endTime <= 2359) {
								return endTime;
							} else {
								return 2359;
							}
						} catch (NumberFormatException nfe) {
							throw new Exception("Invalid Time Format");
						} 
					}
				}
			}
		}
		return 2359;
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	public static int parseTaskStartTime(String parameter) throws Exception  {
		String [] messageArray = generateArray(parameter);

		for (int i = 0; i<=messageArray.length-1; i++) {
			if ((isValidKeyWordStart(messageArray[i], messageArray, i))
					|| (isValidKeyWordStart_2(messageArray[i], messageArray, i))) {
				for (int j=i+1; j<=messageArray.length-1; j++) {
					if (isValidKeyWordAt(messageArray[j], messageArray, j)
							&& isInteger(messageArray[j+1])) {
						try {
							int startTime = Integer.parseInt(messageArray[j+1]);
							if (startTime >= 0000 && startTime <= 2359) {
								return startTime;
							} else {
								return 0000;
							}
						} catch (NumberFormatException nfe) {
							throw new Exception("Invalid Time Format");
						} 
					} else if (isValidKeyWordEnding(messageArray[j], messageArray, j)) {
						return 0000;
					}
				}
			}
		}
		return 0000;
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	public static int parseDayOfMonth(String dateInString) throws Exception {
		int month = parseMonth(dateInString);
		int date = Integer.parseInt(dateInString);
		date = date/10000;
		if (month == 2 && date > 0 && date <= 28) {
			return date;
		} else if (month == 4 || month == 6 || month == 9 || month == 11) {
			if (date > 0 && date <= 30){
				return date;
			}
		} else if (date > 0 &&date <= 31){
			return date;
		} else {
			throw new Exception("Invalid Date Format");
		}
		return date;

	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	public static int parseMonth(String dateInString) throws Exception {
		int _month = 1;
		_month = Integer.parseInt(dateInString);
		_month = _month/100;
		_month = _month % 100;
		if (_month > 0 && _month <= 12) {
			return _month;
		} else {
			throw new Exception("Invalid Date Format");
		}
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	public static int parseDayOfWeek(String parameter) {
		String day = parameter;

		if (day.equalsIgnoreCase(DAY_KEYWORD_TODAY) || day.equalsIgnoreCase(DAY_KEYWORD_TDY)) {
			return TODAY;
		} else if (day.equalsIgnoreCase(DAY_KEYWORD_TOMORROW) || day.equalsIgnoreCase(DAY_KEYWORD_TMR)) {
			return TOMORROW;
		} else if (day.equalsIgnoreCase(DAY_KEYWORD_MONDAY) || day.equalsIgnoreCase(DAY_KEYWORD_MON)) {
			return DateTimeConstants.MONDAY;
		} else if (day.equalsIgnoreCase(DAY_KEYWORD_TUESDAY) || day.equalsIgnoreCase(DAY_KEYWORD_TUE) || 
				day.equalsIgnoreCase(DAY_KEYWORD_TUES)) {
			return DateTimeConstants.TUESDAY;
		} else if (day.equalsIgnoreCase(DAY_KEYWORD_WEDNESDAY) || day.equalsIgnoreCase(DAY_KEYWORD_WED)) {
			return DateTimeConstants.WEDNESDAY;
		} else if (day.equalsIgnoreCase(DAY_KEYWORD_THURSDAY) || day.equalsIgnoreCase(DAY_KEYWORD_THURS) || 
				day.equalsIgnoreCase(DAY_KEYWORD_THUR) || day.equalsIgnoreCase(DAY_KEYWORD_THU)) {
			return DateTimeConstants.THURSDAY;
		} else if (day.equalsIgnoreCase(DAY_KEYWORD_FRIDAY) || day.equalsIgnoreCase(DAY_KEYWORD_FRI)) {
			return DateTimeConstants.FRIDAY;
		} else if (day.equalsIgnoreCase(DAY_KEYWORD_SATURDAY) || day.equalsIgnoreCase(DAY_KEYWORD_SAT)) {
			return DateTimeConstants.SATURDAY;
		} else if (day.equalsIgnoreCase(DAY_KEYWORD_SUNDAY) || day.equalsIgnoreCase(DAY_KEYWORD_SUN)) {
			return DateTimeConstants.SUNDAY;
		} else {
			return TODAY;
		}
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	public static TaskType parseTaskType (String parameter) {
		String [] messageArray = generateArray(parameter);
		if (messageArray.length != 0) {
			for (int i=0; i<=messageArray.length-1; i++) {
				if (isTimedTaskKeyWord(messageArray[i], messageArray, i)) {
					return (TaskType.TIMED);
				}
			}

			for (int i=0; i<=messageArray.length-1; i++) {
				if (isDeadlineTaskKeyWord(messageArray[i], messageArray, i)) {
					return (TaskType.DEADLINE);
				} 
			}		

			for (int i=0; i<=messageArray.length-1; i++) {
				if (isRecurringTaskKeyWord(messageArray[i], messageArray, i)) {
					return (TaskType.RECURRING);
				} 		
			}
		}
		return (TaskType.FLOATING);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isRecurringTaskKeyWord(String string,
			String[] messageArray, int i) {
		return string.equalsIgnoreCase(KEYWORD_RECURRING)
				&& isValidKeyWord(messageArray, KEYWORD_RECURRING, i);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isDeadlineTaskKeyWord(String string,
			String[] messageArray, int i) {
		return string.equalsIgnoreCase(KEYWORD_DEADLINE)
				&& isValidKeyWord(messageArray, KEYWORD_DEADLINE, i);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isTimedTaskKeyWord(String string, String[] messageArray, int i) {
		return (string.equalsIgnoreCase(KEYWORD_DAY_STARTING)
					&& isValidKeyWord(messageArray, KEYWORD_DAY_STARTING, i))
				|| (string.equalsIgnoreCase(KEYWORD_DAY_STARTING_2)
					&& isValidKeyWord(messageArray, KEYWORD_DAY_STARTING_2, i))
				|| string.equalsIgnoreCase(KEYWORD_DAY_ENDING)
					&& isValidKeyWord(messageArray, KEYWORD_DAY_ENDING, i);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	public static String parseTaskName(String parameter) throws Exception {
		String [] messageArray = generateArray(parameter);
		String taskName = EMPTY_STRING;

		if (!parameter.contains(QUOTATION_MARK)) {			
			for (int i=0; i<=messageArray.length-1; i++) {
				if (isKeyWord(messageArray[i])) {
					break;
				} else {
					taskName = taskName + messageArray[i] + SINGLE_SPACE;
				}
			}
		} else {
			for (int i=0; i<=messageArray.length-1; i++) {
				if(isValidKeyWordStart(messageArray[i], messageArray, i)) {
					break;
				} else if (isValidKeyWordStart_2(messageArray[i], messageArray, i)) {
					break;
				} else if (isValidKeyWordEnding(messageArray[i], messageArray, i)) {
					break;
				} else if (isValidKeyWordDeadline(messageArray[i], messageArray, i)) {
					break;
				} else if (isValidKeyWordRecurring(messageArray[i], messageArray, i)) {
					break;
				} else if (isValidKeyWordWith(messageArray[i], messageArray, i)) {
					break;
				} else if (isValidKeyWordAt(messageArray[i], messageArray, i)) {
					break;
				} else if (isValidKeyWordIn(messageArray[i], messageArray, i)) {
					break;
				} else {
					taskName = taskName + messageArray[i] + SINGLE_SPACE;
				} 
			}
		}

		taskName = taskName.replaceAll(QUOTATION_MARK, EMPTY_STRING);
		return taskName.trim();
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	public static boolean isInteger(String s) {
		try { 
			Integer.parseInt(s); 
		} catch(NumberFormatException e) { 
			Log.trace(s+" is not integer",e);
			return false; 
		}
		return true;
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	public static String parseTaskPerson(String parameter) {
		String [] messageArray = generateArray(parameter);
		String taskPerson = EMPTY_STRING;

		if (!parameter.contains(QUOTATION_MARK)) {
			for (int i=0; i+1<=messageArray.length-1; i++) {
				for (int j=i+1; j<=messageArray.length-1; j++) {
					if (isPersonKeyword(messageArray[i])
							&& !isKeyWord(messageArray[j])) {
						taskPerson = taskPerson + messageArray[j] + SINGLE_SPACE;
					} else {
						break;
					}
				}
			}
		} else {
			for (int i=0; i+1<=messageArray.length-1; i++) {
				if((isValidKeyWordWith(messageArray[i], messageArray, i))) {
					for (int j=i+1; j<=messageArray.length-1; j++) {
						if(isValidKeyWordAt(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordStart(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordStart_2(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordEnding(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordDeadline(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordRecurring(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordEnding(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordIn(messageArray[j], messageArray, j)) {
							break;
						} else { 
							taskPerson = taskPerson + messageArray[j] + SINGLE_SPACE;
						}
					}
				}
			}
		}

		taskPerson = taskPerson.replaceAll(QUOTATION_MARK, EMPTY_STRING);

		return taskPerson.trim();
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isValidKeyWordWith(String string, String[] messageArray,
			int j) {
		return messageArray[j].equalsIgnoreCase(KEYWORD_WITH)
		&& isValidKeyWord(messageArray, KEYWORD_WITH, j);
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isValidKeyWordIn(String string, String[] messageArray,
			int j) {
		return messageArray[j].equalsIgnoreCase(KEYWORD_IN)
		&& isValidKeyWord(messageArray, KEYWORD_IN, j);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isValidKeyWordRecurring(String string,
			String[] messageArray, int j) {
		return messageArray[j].equalsIgnoreCase(KEYWORD_RECURRING)
		&& isValidKeyWord(messageArray, KEYWORD_RECURRING, j);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isValidKeyWordDeadline(String string,
			String[] messageArray, int j) {
		return messageArray[j].equalsIgnoreCase(KEYWORD_DEADLINE)
		&& isValidKeyWord(messageArray, KEYWORD_DEADLINE, j);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isValidKeyWordEnding(String string,
			String[] messageArray, int j) {
		return string.equalsIgnoreCase(KEYWORD_DAY_ENDING)
		&& isValidKeyWord(messageArray, KEYWORD_DAY_ENDING, j);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isValidKeyWordStart_2(String string,
			String[] messageArray, int j) {
		return string.equalsIgnoreCase(KEYWORD_DAY_STARTING_2)
				&& isValidKeyWord(messageArray, KEYWORD_DAY_STARTING_2, j);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isValidKeyWordStart(String string,
			String[] messageArray, int j) {
		return string.equalsIgnoreCase(KEYWORD_DAY_STARTING)
				&& isValidKeyWord(messageArray, KEYWORD_DAY_STARTING, j);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isValidKeyWordAt(String string, String[] messageArray,
			int j) {
		return string.equalsIgnoreCase(KEYWORD_AT)
				&& isValidKeyWord(messageArray, KEYWORD_AT, j);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isPersonKeyword(String string) {
		return string.equalsIgnoreCase(KEYWORD_WITH);

	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	public static String parseTaskVenue(String parameter) {
		String [] messageArray = generateArray(parameter);
		String taskVenue = EMPTY_STRING;

		if (!parameter.contains(QUOTATION_MARK)) {
			for (int i=0; i+1<=messageArray.length-1; i++) {
				for (int j=i+1; j<=messageArray.length-1; j++) {
					if ( isVenueKeyword(messageArray[i])
							&& (!isKeyWord(messageArray[j]))
							&& !isInteger(messageArray[j])) {
						taskVenue = taskVenue + messageArray[j] + SINGLE_SPACE;
					} else {
						break;
					}
				}
			}
		} else {
			for (int i=0; i+1<=messageArray.length-1; i++) {
				if(isVenue(messageArray[i], messageArray, i)
						|| isVenue_2(messageArray[i], messageArray, i)) {
					for (int j=i+1; j<=messageArray.length-1; j++) {
						if(isValidKeyWordWith(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordStart (messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordStart_2(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordEnding(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordDeadline(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordRecurring(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordEnding(messageArray[j], messageArray, j)) {
							break;
						} else if (isValidKeyWordAt(messageArray[j], messageArray, j)) {
							break;
						} 

						else { 
							taskVenue = taskVenue + messageArray[j] + SINGLE_SPACE;
						}
					}
				} 
			}
		}

		taskVenue = taskVenue.replaceAll(QUOTATION_MARK, EMPTY_STRING);

		return taskVenue.trim();
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isVenue_2(String string, String[] messageArray, int i) {
		return string.equalsIgnoreCase(KEYWORD_IN)
				&& isValidKeyWord(messageArray, KEYWORD_AT, i);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isVenue(String string, String[] messageArray, int i) {
		return string.equalsIgnoreCase(KEYWORD_AT)
				&& isValidKeyWord(messageArray, KEYWORD_AT, i)
				&& !isInteger(messageArray[i+1]);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isKeyWord(String string) {
		return string.equalsIgnoreCase(KEYWORD_DAY_STARTING)
				|| string.equalsIgnoreCase(KEYWORD_DAY_STARTING_2)
				|| string.equalsIgnoreCase(KEYWORD_DAY_ENDING)
				|| string.equalsIgnoreCase(KEYWORD_DEADLINE)
				|| string.equalsIgnoreCase(KEYWORD_RECURRING)
				|| string.equalsIgnoreCase(KEYWORD_WITH)
				|| string.equalsIgnoreCase(KEYWORD_AT)
				|| string.equalsIgnoreCase(KEYWORD_IN);
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	private static boolean isVenueKeyword(String string) {
		return (string.equalsIgnoreCase(KEYWORD_AT) 
				|| string.equalsIgnoreCase(KEYWORD_IN));
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java
	 */

	public static boolean isValidKeyWord(String [] array, String keyWord, int index) {
		int count = 0;

		for (int i=0; i<=index; i++) {
			String currentWord = array[i];
			if (currentWord.equalsIgnoreCase(keyWord)) {
			} else if (currentWord.indexOf(QUOTATION_MARK) != -1 
					&& currentWord.lastIndexOf(QUOTATION_MARK) != -1
					&& currentWord.indexOf(QUOTATION_MARK) 
					!= currentWord.lastIndexOf(QUOTATION_MARK)) {
				count = count + 2;
			} else if (currentWord.indexOf(QUOTATION_MARK) != -1 
					&& currentWord.indexOf(QUOTATION_MARK) 
					== currentWord.lastIndexOf(QUOTATION_MARK)) {
				count = count + 1;
			}
		}

		if (count % 2 == 0) {
			return true;
		} else {
			assert count %2 == 1 : count;
			return false;
		}
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\parser\TaskParser.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\test\TaskTest.java
	 */

public class TaskTest {

	@Test
	public void testParseName() throws Exception {
		Task task = new Task ("group meeting");
		assertEquals("output should be group meeting", "group meeting" , task.getTaskName());
		try {
			new Task ("group meeting");
		} catch (Exception e) {
			assertEquals("output should be invalid input", "Invalid command. Missing task name.\nTask name must be inside quotation marks." ,
					e.getMessage());
		}
		try {
			new Task ("group meeting");
		} catch (Exception e) {
			assertEquals("output should be invalid input", "Invalid command. Missing task name.\nTask name must be inside quotation marks." , 
					e.getMessage());
		}
	}

	@Test
	public void testParseType() throws Exception {
		Task task = new Task ("group meeting");
		assertEquals("output should be FLOATING", TaskType.FLOATING , task.getTaskType());
		Task task2 = new Task ("group meeting from friday to saturday");
		assertEquals("output should be TIMED", TaskType.TIMED , task2.getTaskType());
		Task task3 = new Task ("group meeting by friday");
		assertEquals("output should be DEADLINE", TaskType.DEADLINE , task3.getTaskType());
		Task task4 = new Task ("group meeting every friday");
		assertEquals("output should be RECURRING", TaskType.RECURRING , task4.getTaskType());
	}

//	@Test
//	public void testParseDay() throws Exception {
//		Task task = new Task ("group meeting from fri at 2359 to sat");
//		assertEquals("output should be Friday", "Friday" , task.getStartDay());
//		assertEquals("output should be Saturday", "Saturday" , task.getEndDay());
//
//		Task task2 = new Task ("group meeting from thur");
//		assertEquals("output should be Thursday", "Thursday" , task2.getStartDay());
//		assertEquals("output should be Thursday", "Thursday" , task2.getEndDay());
//
//		Task task3 = new Task ("group meeting to sunday");
//		assertEquals("output should be Today", "Today" , task3.getStartDay());
//		assertEquals("output should be Sunday", "Sunday" , task3.getEndDay());
//
//		Task task4 = new Task ("group meeting from tue");
//		assertEquals("output should be Tuesday", "Tuesday" , task4.getStartDay());
//		assertEquals("output should be Tuesday", "Tuesday" , task4.getEndDay());
//
//		Task task5 = new Task ("group meeting by weDnesDAY");
//		assertEquals("output should be Today", "Today" , task5.getStartDay());
//		assertEquals("output should be Wednesday", "Wednesday" , task5.getEndDay());
//	}

	@Test
	public void testTime() throws Exception {
		Task task = new Task ("group meeting from fri at 2359 to sat at 1345");
		assertEquals("output should be 2359", 2359 , task.getStartTime());
		assertEquals("output should be 1345", 1345 , task.getEndTime());

		Task task2 = new Task ("group meeting from fri at 2459 to sat at 0000");
		assertEquals("output should be 0000", 0000 , task2.getStartTime());
		assertEquals("output should be 0000", 0000 , task2.getEndTime());

		Task task3 = new Task ("group meeting from fri at 1100 to sat at 1650");
		assertEquals("output should be 1100", 1100 , task3.getStartTime());
		assertEquals("output should be 1650", 1650 , task3.getEndTime());


		Task task4=new Task ("group meeting from fri at 11h00 to sat at 16h50");
		assertEquals("output should not be 1100", 0 , task4.getStartTime());
		assertEquals("output should not be 1650", 2359 , task4.getEndTime());
		
		Task task5 = new Task ("group meeting to sat at 1650");
		assertEquals("output should be 0000", 0000 , task5.getStartTime());
		assertEquals("output should be 1650", 1650 , task5.getEndTime());
	}

	@Test
	public void testDateMonthYear() throws Exception {
		Task task = new Task ("group meeting from 090314 at 1500 to 100514 at 1650");
		assertEquals("output should be 9", 9, task.getStartDate());
		assertEquals("output should be 03", 3, task.getStartMonth());
		assertEquals("output should be 2014", 2014, task.getStartYear());
		assertEquals("output should be 10", 10, task.getEndDate());
		assertEquals("output should be 5", 5, task.getEndMonth());
		assertEquals("output should be 2014", 2014, task.getEndYear());
		
	}

	@Test
	public void testVenueAndPerson() throws Exception {
		Task task = new Task ("group meeting with Linh at school cafe at 1500" );
		assertEquals ("output should be Linh", "Linh" , task.getTaskPerson());
		assertEquals ("output should be school cafe", "school cafe" , task.getTaskVenue());

	}

	@Test
	public void testGeneralCases() throws Exception {
		Task task = new Task ("group meeting with ben and linh at computing on 140414 at 1600");
		assertEquals ("output should be group meeting", "group meeting", task.getTaskName());
		assertEquals ("output should be ben and linh", "ben and linh", task.getTaskPerson());
		assertEquals ("output should be computing", "computing", task.getTaskVenue());
		assertEquals ("output should be 14", 14, task.getStartDate());
		assertEquals ("output should be 4", 4, task.getStartMonth());
		assertEquals ("output should be 14", 2014, task.getStartYear());

		Task task2 = new Task ("camping with schoolmates in school from saturday at 1500 to sunday at 1600" );
		assertEquals ("output should be schoolmates", "schoolmates" , task2.getTaskPerson());
		assertEquals ("output should be school", "school" , task2.getTaskVenue());
		assertEquals ("output should be 1500", 1500 , task2.getStartTime());
		assertEquals ("output should be 1500", 1600 , task2.getEndTime());

		Task task3 = new Task ("engin club meeting with engin club in club room on tuesday at 1500 to wed at 0800");
		assertEquals ("output should be engin club meeting", "engin club meeting", task3.getTaskName());
		assertEquals ("output should be engin club", "engin club" , task3.getTaskPerson());
		assertEquals ("output should be club room", "club room" , task3.getTaskVenue());
		assertEquals ("output should be 1500", 1500 , task3.getStartTime());
		assertEquals ("output should be 0800", 800 , task3.getEndTime());

		Task task4 = new Task ("engin club meeting with engin club in club room on 290314 at 1500 to 300314 at 0800");
		assertEquals ("output should be engin club meeting", "engin club meeting", task4.getTaskName());
		assertEquals ("output should be engin club", "engin club" , task4.getTaskPerson());
		assertEquals ("output should be club room", "club room" , task4.getTaskVenue());
		assertEquals ("output should be 29", 29 , task4.getStartDate());
		assertEquals ("output should be 30", 30 , task4.getEndDate());
		assertEquals ("output should be 03", 3 , task4.getStartMonth());
		assertEquals ("output should be 03", 3 , task4.getEndMonth());
		assertEquals ("output should be 2014", 2014 , task4.getStartYear());
		assertEquals ("output should be 2014", 2014 , task4.getEndYear());
		assertEquals ("output should be 1500", 1500 , task4.getStartTime());
		assertEquals ("output should be 0800", 800 , task4.getEndTime());
		try{
			Task task5 = new Task ("engin club meeting with engin club in club room on 331312 at 1500 to 331312 at 0800");
			fail();
			assertEquals ("output should be engin club meeting", "engin club meeting", task5.getTaskName());
			assertEquals ("output should be engin club", "engin club" , task5.getTaskPerson());
			assertEquals ("output should be club room", "club room" , task5.getTaskVenue());
		} catch (Exception e) {
			assertEquals("output should be Invalid Date Format", "Invalid Date Format", e.getMessage());
		}
	}
	
	@Test
	public void testValidKeyWord() {
		String s1 = "deadline task with \'dad at soc\' at \'dad with soc\'";
		String[] arr1 = s1.split(" ");

		assertEquals(true, TaskParser.isValidKeyWord(arr1, "with", 2));
		assertEquals(false, TaskParser.isValidKeyWord(arr1, "at", 4));
		assertEquals(false, TaskParser.isValidKeyWord(arr1, "with", 8));
		assertEquals(true, TaskParser.isValidKeyWord(arr1, "at", 6));
	}

	@Test
	public void testFull() {
		//To test deadline task
		Task task;
		try {
			task = new Task ("homework 1 by 101114 at 1900");
			assertEquals ("output should be homework 1", "homework 1", task.getTaskName());
			assertEquals ("output should be 1900", 1900, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("homework 2 by tue at -1");
			assertEquals ("output should be homework 2", "homework 2", task.getTaskName());
			assertEquals ("output should be 2359", 2359, task.getEndTime());
			assertEquals ("nearest date of tuesday", 11, task.getEndDate());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("homework 3 by wed at 2430");
			assertEquals ("output should be homework 3", "homework 3", task.getTaskName());
			assertEquals ("output should be 2359", 2359, task.getEndTime());
			assertEquals ("nearest date of Wednesday", 12, task.getEndDate());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		//To test floating task
		try {
			task = new Task ("group meeting 1 at soc with team");
			assertEquals ("output should be group meeting 1", 
					"group meeting 1", task.getTaskName());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("\'group meeting 2 at soc with team\'");
			assertEquals ("output should be group meeting 2 at soc with team", 
					"group meeting 2 at soc with team", task.getTaskName());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		//To test floating task
		try {
			task = new Task ("group meeting 1 at soc with team");
			assertEquals ("output should be group meeting 1", 
					"group meeting 1", task.getTaskName());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		//To test for timed task
		try {
			task = new Task ("exam 1 from thur at 1900 to 2000");
			assertEquals ("output should be exam 1", "exam 1", task.getTaskName());
			assertEquals ("output should be 13", 13, task.getStartDate());
			assertEquals ("output should be 13", 1900, task.getStartTime());
			assertEquals ("output should be 13", 13, task.getEndDate());
			assertEquals ("output should be 2000", 2000, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 2 from thur at 2000 to fri at 2100");
			assertEquals ("output should be exam 2", "exam 2", task.getTaskName());
			assertEquals ("output should be 13", 13, task.getStartDate());
			assertEquals ("output should be 2000", 2000, task.getStartTime());
			assertEquals ("output should be 14", 14, task.getEndDate());
			assertEquals ("output should be 2100", 2100, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 3 from friday to sat at 1800");
			assertEquals ("output should be exam 3", "exam 3", task.getTaskName());
			assertEquals ("output should be 14", 14, task.getStartDate());
			assertEquals ("output should be 0000", 0000, task.getStartTime());
			assertEquals ("output should be 15", 15, task.getEndDate());
			assertEquals ("output should be 1800", 1800, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 4 on thursday at 1700 to sunday");
			assertEquals ("output should be exam 4", "exam 4", task.getTaskName());
			assertEquals ("output should be 13", 13, task.getStartDate());
			assertEquals ("output should be 1700", 1700, task.getStartTime());
			assertEquals ("output should be 16", 16, task.getEndDate());
			assertEquals ("output should be 2359", 2359, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 5 from thursday at -1 to friday at 1000");
			assertEquals ("output should be exam 5", "exam 5", task.getTaskName());
			assertEquals ("output should be 13", 13, task.getStartDate());
			assertEquals ("output should be 0000", 0000, task.getStartTime());
			assertEquals ("output should be 14", 14, task.getEndDate());
			assertEquals ("output should be 1000", 1000, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 6 from thursday at 2430 to friday at 1000");
			assertEquals ("output should be exam 6", "exam 6", task.getTaskName());
			assertEquals ("output should be 13", 13, task.getStartDate());
			assertEquals ("output should be 0000", 0000, task.getStartTime());
			assertEquals ("output should be 14", 14, task.getEndDate());
			assertEquals ("output should be 1000", 1000, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 7 from thursday at 1100 to friday at -1");
			assertEquals ("output should be exam 7", "exam 7", task.getTaskName());
			assertEquals ("output should be 13", 13, task.getStartDate());
			assertEquals ("output should be 1100", 1100, task.getStartTime());
			assertEquals ("output should be 14", 14, task.getEndDate());
			assertEquals ("output should be 2359", 2359, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 8 from thursday at 1100 to friday at 2430");
			assertEquals ("output should be exam 8", "exam 8", task.getTaskName());
			assertEquals ("output should be 13", 13, task.getStartDate());
			assertEquals ("output should be 1100", 1100, task.getStartTime());
			assertEquals ("output should be 14", 14, task.getEndDate());
			assertEquals ("output should be 2359", 2359, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 9 from 121114 at 1600 to 131114 at 1700");
			assertEquals ("output should be exam 9", "exam 9", task.getTaskName());
			assertEquals ("output should be 12", 12, task.getStartDate());
			assertEquals ("output should be 1600", 1600, task.getStartTime());
			assertEquals ("output should be 13", 13, task.getEndDate());
			assertEquals ("output should be 1700", 1700, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 10 from 121114 at -1 to 131114 at 1700");
			assertEquals ("output should be exam 10", "exam 10", task.getTaskName());
			assertEquals ("output should be 12", 12, task.getStartDate());
			assertEquals ("output should be 0000", 0000, task.getStartTime());
			assertEquals ("output should be 13", 13, task.getEndDate());
			assertEquals ("output should be 1700", 1700, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 11 from 121114 at 2430 to 131114 at 1700");
			assertEquals ("output should be exam 11", "exam 11", task.getTaskName());
			assertEquals ("output should be 12", 12, task.getStartDate());
			assertEquals ("output should be 0000", 0000, task.getStartTime());
			assertEquals ("output should be 13", 13, task.getEndDate());
			assertEquals ("output should be 1700", 1700, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 12 from 121114 at 0900 to 131114 at -1");
			assertEquals ("output should be exam 12", "exam 12", task.getTaskName());
			assertEquals ("output should be 12", 12, task.getStartDate());
			assertEquals ("output should be 0900", 900, task.getStartTime());
			assertEquals ("output should be 13", 13, task.getEndDate());
			assertEquals ("output should be 2359", 2359, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 13 from 121114 at 0900 to 131114 at 2430");
			assertEquals ("output should be exam 13", "exam 13", task.getTaskName());
			assertEquals ("output should be 12", 12, task.getStartDate());
			assertEquals ("output should be 0900", 900, task.getStartTime());
			assertEquals ("output should be 13", 13, task.getEndDate());
			assertEquals ("output should be 2359", 2359, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("exam 14 from 131114 to 141114");
			assertEquals ("output should be exam 14", "exam 14", task.getTaskName());
			assertEquals ("output should be 13", 13, task.getStartDate());
			assertEquals ("output should be 0000", 0000, task.getStartTime());
			assertEquals ("output should be 14", 14, task.getEndDate());
			assertEquals ("output should be 2359", 2359, task.getEndTime());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		//To test for person
		try {
			task = new Task ("group work 1 with teammate at soc");
			assertEquals ("output should be teammate", "teammate", task.getTaskPerson());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			task = new Task ("group work 1 with \'teammate at soc\'");
			assertEquals ("output should be teammate ay soc", "teammate at soc", task.getTaskPerson());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		//To test for venue
				try {
					task = new Task ("picnic 1 with friends at gardens by the bay");
					assertEquals ("output should be gardens", "gardens", task.getTaskVenue());
				} catch (Exception e) {
					e.printStackTrace();
				}
				
				try {
					task = new Task ("picnic 1 with friends at \'gardens by the bay\'");
					assertEquals ("output should be gardens by the bay", "gardens by the bay", task.getTaskVenue());
				} catch (Exception e) {
					e.printStackTrace();
				}
	}
}
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\test\TaskTest.java





