//@author: a0111513b



	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\CustomRenderer.java
	 */

public class CustomRenderer extends DefaultTableCellRenderer {
	//private static final int OVERDUE = -1;
	private static final int NOT_DEADLINE = Integer.MIN_VALUE;
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public Component getTableCellRendererComponent(JTable table, Object value,
			boolean isSelected, boolean hasFocus, int row, int column) {
		Component cellComponent = super.getTableCellRendererComponent(table,
				value, isSelected, hasFocus, row, column);

		if (((String) table.getValueAt(row, 4)).equalsIgnoreCase("done")) {
			colorCell(cellComponent,new Color(46, 204, 113, 30));
		} else {
			int duePeriod = (int) table.getValueAt(row, 5);
			colorCell(cellComponent,computeColor(duePeriod));
		} 
		if ((Boolean) table.getValueAt(row, 6) == true) {
			highlightCell(cellComponent);
		}
		return cellComponent;
	}
	private Color computeColor(int duePeriod) {
		Color original = new Color(231, 76, 60, 240);
		int red = original.getRed();
		int green = original.getGreen();
		int blue = original.getBlue();
		if ((duePeriod != NOT_DEADLINE) && (duePeriod <=7)) {
			red = (red*(7-duePeriod) + 255*duePeriod)/7;
			green = (green*(7-duePeriod) + 255*duePeriod)/7;
			blue = (blue*(7-duePeriod) + 255*duePeriod)/7; 
		} else {
			return new Color(255, 255, 255, 0);
		}
		return new Color(red, green, blue, 180);
	}
	private void highlightCell(Component cellComponent) {
		//Color color = Color.YELLOW;
		JPanel highlightCell = new JPanel()
		{
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			@Override
			protected void paintComponent(Graphics g)
		    {
		        g.setColor( getBackground() );
		        g.fillRect(0, 0, getWidth(), getHeight());
		        super.paintComponent(g);
		    }
		};
		((JComponent) cellComponent).setBackground(new Color(255,255,0,200));
		((JComponent) cellComponent).setOpaque(true);
		((JComponent) cellComponent).add(highlightCell);
		
	}
		
	private void colorCell(Component cellComponent, Color color) {
		JPanel colorCell = new JPanel()
		{
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			@Override
			protected void paintComponent(Graphics g)
		    {
		        g.setColor( getBackground() );
		        g.fillRect(0, 0, getWidth(), getHeight());
		        super.paintComponent(g);
		    }
		};
		((JComponent) cellComponent).setBackground(color);
		((JComponent) cellComponent).setOpaque(true);
		((JComponent) cellComponent).add(colorCell);
	}
}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\CustomRenderer.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\DigitalClock.java
	 */

public class DigitalClock {
	private final JLabel time = new JLabel();
    private final SimpleDateFormat sdf  = new SimpleDateFormat("EEE, d MMM yyyy HH:mm");
    private int   currentSecond;
    private Calendar calendar;
    
    

    public JLabel getTime(){
    	time.setPreferredSize(new Dimension(700,20));
    	return time;
    }
    private void reset(){
        calendar = Calendar.getInstance();
        currentSecond = calendar.get(Calendar.SECOND);
    }
    public void start(){
    	time.setForeground(Color.WHITE);
        reset();
        Timer timer = new Timer(1000, new ActionListener(){
            public void actionPerformed( ActionEvent e ) {
                    if( currentSecond == 60 ) {
                        reset();
                    }
                    time.setText( String.format("%s:%02d", sdf.format(calendar.getTime()), currentSecond ));
                    time.setHorizontalAlignment(SwingConstants.CENTER);
                    
                    Font font = new Font("SansSerif", Font.BOLD,18);
                    time.setFont(font);
                    currentSecond++;
                }
            });
            timer.start();
        }
}


	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\DigitalClock.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\InvisibleRenderer.java
	 */

public class InvisibleRenderer extends DefaultTableCellRenderer {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public Component getTableCellRendererComponent(JTable table, Object value,
			boolean isSelected, boolean hasFocus, int row, int column) {
		Component cellComponent = super.getTableCellRendererComponent(table,
				value, isSelected, hasFocus, row, column);

		if (((String) table.getValueAt(row, 4)).equalsIgnoreCase("done")) {
			colorCell(cellComponent,new Color(255, 255, 255, 0));
		} else {
			colorCell(cellComponent,new Color(255, 255, 255, 0));
		} 
		if ((Boolean) table.getValueAt(row, 6) == true) {
			highlightCell(cellComponent);
		}
		return cellComponent;
	}
	private void highlightCell(Component cellComponent) {
		//Color color = Color.YELLOW;
		JPanel highlightCell = new JPanel()
		{
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			@Override
			protected void paintComponent(Graphics g)
		    {
		        g.setColor( getBackground() );
		        g.fillRect(0, 0, getWidth(), getHeight());
		        super.paintComponent(g);
		    }
		};
		((JComponent) cellComponent).setBackground(new Color(255,255,0,0));
		((JComponent) cellComponent).setOpaque(true);
		((JComponent) cellComponent).add(highlightCell);
		
	}
	
	private void colorCell(Component cellComponent, Color color) {
		JPanel colorCell = new JPanel()
		{
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			@Override
			protected void paintComponent(Graphics g)
		    {
		        g.setColor( getBackground() );
		        g.fillRect(0, 0, getWidth(), getHeight());
		        super.paintComponent(g);
		    }
		};
		((JComponent) cellComponent).setBackground(color);
		((JComponent) cellComponent).setOpaque(true);
		((JComponent) cellComponent).add(colorCell);
	}
}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\InvisibleRenderer.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\ToDoLogTableModel.java
	 */

public interface ToDoLogTableModel {
	public void pageUp();
	public void pageDown();
	public void goToPage(int page);
}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\ToDoLogTableModel.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\ToDoTasksListTableModel.java
	 */

public class ToDoTasksListTableModel extends AbstractTableModel implements ToDoLogTableModel{
	

	/**
	 * 
	 */
	private static final long serialVersionUID = -4665613032022419075L;
	/**
	 * 
	 */
	
	private final static String[] COLUMNS = {" No.","Name","Time","Person / Venue","Status","<hidden>","<hidden>"};
	private LinkedList<Task> tableData;
	private final static int PAGE_SIZE = 16;
	//private static final int NOT_DEADLINE = -1;

	private int pageOffSet = 0;
	
	public ToDoTasksListTableModel(LinkedList<Task> toDoListItems){
		tableData = toDoListItems;
	}
	
	public void setTableData(LinkedList<Task> toDoListItems){
		tableData = toDoListItems;
	}
	public int getColumnCount(){
		

		
		return COLUMNS.length;
	}
	
	
	public int getRowCount(){
		//return tableData.size();
		if(pageOffSet == getPageCount() -1){  
			if(tableData.size() % PAGE_SIZE == 0){
				return PAGE_SIZE;
			}
			
			else{
				return tableData.size() % PAGE_SIZE;
			}
		}
		return Math.min(PAGE_SIZE, tableData.size());
	}
	
	public int getActualRowCount(){
		return tableData.size();
	}
	
	public int getPageSize(){
		return PAGE_SIZE;
	}
	public String getColumnName(int col){
		return COLUMNS[col];
	}
	public Object getValueAt(int row,int col){
		
		int actualRow = row + (pageOffSet * PAGE_SIZE);
		Task task = tableData.get(actualRow);
		
		if(task == null){
			return null;
		}
		
		switch(col){
		
		case 0:
			return " "+(actualRow+1);
		
		case 1: 
			return task.getTaskName();
			
		case 2:
			switch (task.getTaskType()) {
				case FLOATING:
					return "-";
				case TIMED:
					return String.format("%02d",task.getStartDate())+"/"
							+ task.getStartMonth()+" " 
							+ task.getStartTimeStr() + " - " 
							+ String.format("%02d",task.getEndDate())+"/"
							+ task.getEndMonth()+" "
							+ task.getEndTimeStr();
				case DEADLINE:
					return String.format("%02d",task.getEndDate())+"/"
					+ task.getEndMonth()+" "
					+ task.getEndTimeStr();
				case RECURRING:
					break;
				default:
					break;
			}
			
			
		case 3: {
			String col4 = "";
			if (!task.getTaskPerson().isEmpty()) {
				col4 = col4.concat(task.getTaskPerson().concat(" "));
			}
			if (!task.getTaskVenue().isEmpty()) {
				col4 = col4.concat("@ ").concat(task.getTaskVenue());
			}
			return col4;
		}
		case 4:
			if(task.getTaskStatus() == true){
				return "Done";
			}
			else{
				int duePeriod = task.duePeriod();
				
				if (task.getTaskType() == TaskType.DEADLINE) {
					if (duePeriod == -1){
						return "Overdue!";
					} else if (duePeriod == 0) {
						return "Due today";
					} else if (duePeriod == 1) {
						return "Due tomorrow";
					} else if (duePeriod > 7) {
						return "Due Later";
					} else {
						return String.format("Due in %d days", duePeriod);
					}
				} else if (task.getTaskType() == TaskType.TIMED){
					if (duePeriod == -1){
						return "Past event";
					} else if (duePeriod == 0) {
						return "Today";
					} else if (duePeriod == 1) {
						return "Tomorrow";
					} else if (duePeriod > 7) {
						return "Later";
					} else {
						return String.format("In %d days", duePeriod);
					}
				}
				return "";	
			} 
		case 5:
			return task.duePeriod();
		case 6:
			if (task == Controller.getFocusTask()) {
				return true;
			}
			else {
				return false;
			}
		default:
			return null;
			
		}
	}
	
	public int getPageOffSet(){
		return pageOffSet;
	}
	
	public int getPageCount() {
	    return (int) Math.ceil((double) tableData.size() / PAGE_SIZE);
	}
	
	public void setPageOffSet(int input){
		pageOffSet = input;
	}
	
	 public void pageDown() {
		    if (pageOffSet < getPageCount() - 1) {
		      pageOffSet++;
		      fireTableDataChanged();
		    }
		  }

	 public void pageUp() {
		    if (pageOffSet > 0) {
		      pageOffSet--;
		      fireTableDataChanged();
		    }
		  }

	public void goToPage(int page) {
		pageOffSet = page;
		fireTableDataChanged();
		
	}
}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\ToDoTasksListTableModel.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	@Override
	public void setVisible(boolean value) {
		super.setVisible(value);
		commandEntryTextField.requestFocusInWindow();
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	public static void main(String[] args) {
		
		EventQueue.invokeLater(new Runnable() {
			public void run() {  
				try {
					window = new UserInterface();
					window.dispose();
					window.setVisible(true);
					window.addMouseListener(window.new ScreenDraggingMouseListener());
					window.addMouseMotionListener(window.new ScreenDraggingMouseMotionListener());
				} catch (Exception e) {
					e.printStackTrace();
				}
			}	
		});
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	public UserInterface() {
		initialize(this); 
		fillUpTheJFrame(this);
		useJIntellitype();
		makeTrayIcon(this);
		startReminderTimer();
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	//this initialize method sets up the main frame for ToDoLog
	private void initialize(JFrame UserInterface) { 
		Controller.init();
		setIconsForApplication(UserInterface);
		setWindowParameters(UserInterface);	
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	private void setWindowParameters(JFrame UserInterface) {
		UserInterface.setTitle("ToDoLog");
		UserInterface.setResizable(false);
		UserInterface.setBounds(325,140,700, 610);					
		UserInterface.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		UserInterface.setUndecorated(true);
		UserInterface.setBackground(new Color(255,255,255,255));
		UserInterface.addWindowListener(new WindowStatusWindowListener());
		Log.info("Draw the window frame");
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	//this method consists of setting the different sections within the frame of ToDoLog
	private void fillUpTheJFrame(JFrame UserInterface){
		Container contentPane = UserInterface.getContentPane();
		layeredPane = new JLayeredPane();
		contentPane.add(layeredPane);
		addBackgroundLabel(layeredPane);
		addMainPanel(layeredPane);
		Log.info("Draw all components on frame");
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	private void addMainPanel(Container layeredPane) {
		JPanel mainPanel = new JPanel();
		mainPanel.setBounds(0, 0, 700, 590);
		mainPanel.setLayout(new GridBagLayout());
		mainPanel.setOpaque(false);
		createTopPanel(mainPanel);
		createTablesHolder(mainPanel);
		createBottomPanel(mainPanel); 
		layeredPane.add(mainPanel,new Integer(2));
		Log.info("Drawed main panel");
	}	
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	private void createClockPanel(Container topPanel){
		
		 clock = new DigitalClock();
		 GridBagConstraints clockPanelParameters = setParameters(ID_CLOCK_PANEL);
		 topPanel.add(clock.getTime(),clockPanelParameters); //clock.getTime() refers to the JLabel within DigitalClock class
		 clock.start();
		 Log.info("Drawed clock");
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	private void createTablesHolder(Container mainPanel){
		GridBagConstraints panelParameters;   
		panelParameters = setParameters(ID_TABLES_HOLDER); 
		//panelParameters are values for how the toDoListHolder panel will fit into the main 
		//frame of ToDoLog
		
		JPanel toDoListHolder = new JPanel(new GridBagLayout());
		toDoListHolder.setPreferredSize(new Dimension(650, 310));
		
		//add scheduleTable and flexibleTable into the toDoListHolder
		createScheduleTableLabel(toDoListHolder);
		createScheduleTable(toDoListHolder);
		createFlexibleTableLabel(toDoListHolder);
		createFlexibleTable(toDoListHolder);
		
		//add the toDoListHolder to the mainPanel
		mainPanel.add(toDoListHolder, panelParameters);
		toDoListHolder.setOpaque(false);
		Log.info("Drawed all tables");
		
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	/* here is where the table displaying the user's tasks is implemented
	 * the table is formed in reference to a table model, and then placed into a scroll pane 
	 * which is then added to the toDoListHolder
	 */
	private void createScheduleTable(Container toDoListHolder) {
		//GridBagConstraints to position the scrollPane within toDoListHolder
		GridBagConstraints scrollPaneParameters; 
		scrollPaneParameters = setParameters(ID_SCHEDULE_TABLE);
		
		/* a Table Model is used to adjust the table information for ToDoLog
		 */
		scheduleTableModel = new ToDoTasksListTableModel(scheduleTableItems);
		scheduleTable = new JTable(scheduleTableModel);
		scheduleTable.setPreferredSize(new Dimension(450,280));
		//fix the width of the columns of the table and color the rows
		//according to the different due dates of tasks
		adjustToDoTaskTableColumns(scheduleTable);
		
		scheduleTable.getTableHeader().setResizingAllowed(false);
		scheduleTable.getTableHeader().setBackground(new Color(0,0,0,0));
		scheduleTable.getTableHeader().setReorderingAllowed(false);
        
        //get rid of the usual grid in the JTable
		scheduleTable.setShowGrid(false);
		scheduleTable.setIntercellSpacing(new Dimension(0, 0));
		scheduleTable.setOpaque(false);
		scheduleTable.setEnabled(false);
		
		focusTable = scheduleTable;
		((DefaultTableCellRenderer)scheduleTable.getDefaultRenderer(Object.class)).setOpaque(false);
		InputStream in = this.getClass().getClassLoader().getResourceAsStream(FILEPATH_FONT_OPENSANS_REGULAR);
		try {
			Font font;
			font = Font.createFont(Font.TRUETYPE_FONT, in);
			Font sizedFont = font.deriveFont(TABLE_FONT_SIZE);
			scheduleTable.setFont(sizedFont);
			scheduleTable.getTableHeader().setFont(sizedFont);
		} catch (FontFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
        scheduleTableScrollPane = new JScrollPane(scheduleTable)

		{
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;
			
			protected void paintComponent(Graphics g)
		    {	
				int arc = 20;
		        g.setColor( getBackground() );
		        ((Graphics2D) g).setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		        g.fillRoundRect(0, 0, getWidth(), getHeight(), arc, arc);
		        super.paintComponent(g);
		    }
		};
        //settings of the scroll pane
		scheduleTableScrollPane.setBorder(BorderFactory.createLineBorder(new Color(247,223,124),3));
		scheduleTableScrollPane.setPreferredSize(new Dimension(450,280));
        scheduleTableScrollPane.setOpaque(false);
		scheduleTableScrollPane.setBackground(new Color(255,255,255,220));
		scheduleTableScrollPane.getViewport().setOpaque(false);
		scheduleTableScrollPane.getViewport().setBackground(new Color(255,255,255,220));
		scheduleTableScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
		
		//to disable borders at the table headers and also to shift the  headings to the left
        scheduleTable.getTableHeader().setDefaultRenderer(new DefaultTableCellHeaderRenderer() {            
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
            public Component getTableCellRendererComponent(
                                                           JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                DefaultTableCellHeaderRenderer rendererComponent = (DefaultTableCellHeaderRenderer)super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                
                rendererComponent.setBorder(null);
                rendererComponent.setHorizontalAlignment(LEFT);
                
                return rendererComponent;
            }     
        });
        scheduleTableItems = Controller.getAllTasksInViewList();
		scheduleTableModel = new ToDoTasksListTableModel(scheduleTableItems);
		scheduleTableLabel.setText(Controller.getViewOrSearchType());
		scheduleTable.setModel(scheduleTableModel);
		adjustToDoTaskTableColumns(scheduleTable);
		changeToDoTableColors(scheduleTable, new CustomRenderer());
		focusTable = scheduleTable;
		
		toDoListHolder.add(scheduleTableScrollPane,scrollPaneParameters);
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	//implementation is about the same as toDoTaskTable
	private void createFlexibleTable(JPanel toDoListHolder) {
		
		//set position of folatingTaskTable in toDoListHolder
		GridBagConstraints floatingTaskListParameters; 
		floatingTaskListParameters = setParameters(ID_FLEXIBLE_TABLE);
		
		//use a table model to set the table
		flexibleTableModel = new FloatingTasksListTableModel(flexibleTableItems);
		flexibleTable = new JTable(flexibleTableModel);
		flexibleTable.setPreferredSize(new Dimension(180,270));
		//adjust the columns and rows
		adjustFloatingTaskTableColumns(flexibleTable);
		
		flexibleTable.getTableHeader().setResizingAllowed(false);
		flexibleTable.getTableHeader().setBackground(new Color(0,0,0,0));
		flexibleTable.getTableHeader().setReorderingAllowed(false);
		flexibleTable.getTableHeader().setDefaultRenderer(new DefaultTableCellHeaderRenderer() {
            /**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
            public Component getTableCellRendererComponent(JTable table, Object value, 
            		boolean isSelected, boolean hasFocus, int row, int column) {
                DefaultTableCellHeaderRenderer rendererComponent = 
                		(DefaultTableCellHeaderRenderer)super.getTableCellRendererComponent(table, value, 
                				isSelected, hasFocus, row, column);
                rendererComponent.setBorder(null);
                rendererComponent.setHorizontalAlignment(LEFT);
                
                return rendererComponent;
            }
            
        });
		
		//get rids of the normal grid that tables have
		flexibleTable.setOpaque(false);
		flexibleTable.setEnabled(false);
		flexibleTable.setShowGrid(false);
		flexibleTable.setIntercellSpacing(new Dimension(0, 0));
		((DefaultTableCellRenderer)flexibleTable.getDefaultRenderer(Object.class)).setOpaque(false);
		
		InputStream in = this.getClass().getClassLoader().getResourceAsStream(FILEPATH_FONT_OPENSANS_REGULAR);
		try {
			Font font;
			font = Font.createFont(Font.TRUETYPE_FONT, in);
			Font sizedFont = font.deriveFont(TABLE_FONT_SIZE);
			flexibleTable.setFont(sizedFont);
			flexibleTable.getTableHeader().setFont(sizedFont);
		} catch (FontFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		flexibleTableScrollPane = new JScrollPane(flexibleTable)
		{
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			protected void paintComponent(Graphics g)
		    {	
				int arc = 20;
		        g.setColor( getBackground() );
		        ((Graphics2D) g).setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		        g.fillRoundRect(0, 0, getWidth(), getHeight(), arc, arc);
		        super.paintComponent(g);
		    }
		};
		
		flexibleTableScrollPane.setBorder(BorderFactory.createLineBorder(Color.GRAY, 3));
		flexibleTableScrollPane.setPreferredSize(new Dimension(180,270));
		flexibleTableScrollPane.setOpaque(false);
		flexibleTableScrollPane.setBackground(new Color(255,255,255,220));
		flexibleTableScrollPane.getViewport().setOpaque(false);
		flexibleTableScrollPane.getViewport().setBackground(new Color(255,255,255,220));
		flexibleTableScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
		flexibleTableItems = Controller.getFlexibleList();
		flexibleTableModel = new FloatingTasksListTableModel(flexibleTableItems);
		flexibleTable.setModel(flexibleTableModel);
		adjustFloatingTaskTableColumns(flexibleTable);
		changeFloatingTableColors(flexibleTable, new CustomRenderer());
		toDoListHolder.add(flexibleTableScrollPane,floatingTaskListParameters);
		
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	/* this method creates the bottom section of ToDoLog which consists of the command entry
	 *	line and the dynamic help text area
	 */
	private void createBottomPanel(Container mainPanel){
		
		//settings of the bottom panel
		JPanel bottomPanel = new JPanel(new GridBagLayout());
		bottomPanel.setBackground(new Color(255,255,255,0));
		bottomPanel.setPreferredSize(new Dimension(650,170));
		bottomPanel.setOpaque(true);
		
		//position of the bottom panel within the main panel
		GridBagConstraints parameters;
		parameters = setParameters(ID_BOTTOM_PANEL);
		
		createCommandEntryTextField(bottomPanel);
		createHelpTextArea(bottomPanel);

		mainPanel.add(bottomPanel, parameters);
		Log.info("Drawed bottom panel");
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	private void createCommandEntryTextField(JPanel bottomPanel) {
		
		//position of the commandEntryTextField within bottom panel
		GridBagConstraints bottomPanelParameters;
		bottomPanelParameters = setParameters(ID_COMMAND_ENTRY_TEXT_FIELD);
		
		commandEntryTextField = new JTextField(20){
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			protected void paintComponent(Graphics g){
				int arc = 10;
		        g.setColor( getBackground() );
		        ((Graphics2D) g).setRenderingHint (RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		        g.fillRoundRect(0, 0, getWidth(), getHeight(), arc, arc);
		        super.paintComponent(g);
			}
		};
		bottomPanel.add(commandEntryTextField,bottomPanelParameters);
		InputStream in = this.getClass().getClassLoader().getResourceAsStream(FILEPATH_FONT_BPMONO);
		
		try {
			Font font;
			font = Font.createFont(Font.TRUETYPE_FONT, in);
			Font sizedFont = font.deriveFont(ENTRY_TEXT_FIELD_FONT_SIZE);
			commandEntryTextField.setFont(sizedFont);
		} catch (FontFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		commandEntryTextField.setBorder(new LineBorder(new Color(34,167,247),2,false));
		commandEntryTextField.setFocusTraversalKeysEnabled(false);
		
		//actionListener to take in the user's input and keylistener to enable features
		//such as flipping through pages of the user's tasks, getting the previous user 
		//input, and changing focus between the toDoTaskTable and floatingTaskTable
		commandEntryTextField.addActionListener(new CommandEntryTextFieldActionListener());
		commandEntryTextField.addKeyListener(new CommandEntryTextFieldKeyListener());
		commandEntryTextField.getDocument().addDocumentListener(new CommandEntryTextFieldDocumentListener());
		commandEntryTextField.getDocument().putProperty("name", "Text Field");
		Log.info("Drawed entry text field");
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	private void createHelpTextArea(JPanel bottomPanel){
		
		//position of the dynamicHelpText within the bottomPanel
		GridBagConstraints helpTextParameters;
		helpTextParameters = setParameters(ID_HELP_TEXT_AREA);
		
		//characterize the text area box into the bottom panel
		helpText = new JTextArea(5,33);
		helpText.setMaximumSize(helpText.getSize());
		helpText.setBorder(new LineBorder(Color.GRAY));
		helpText.setLineWrap(true);
		helpText.setWrapStyleWord(false);
		helpText.setEditable(false);
		helpText.setFocusable(false);
		helpText.setHighlighter(null);
		helpText.append(Controller.getFeedback());
		InputStream in = this.getClass().getClassLoader().getResourceAsStream(FILEPATH_FONT_OPENSANS_REGULAR);
		try {
			Font font;
			font = Font.createFont(Font.TRUETYPE_FONT, in);
			Font sizedFont = font.deriveFont(HELP_TEXT_FONT_SIZE);
			helpText.setFont(sizedFont);
		} catch (FontFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		//put the dynamic area into a scroll pane
		bottomPanel.add(helpText,helpTextParameters);
		Log.info("Drawed help text area");
	
	}	
	
	/*we use JIntellitype to enable the use of hotkeys to enable features like minimizing
	 * and maximizing, and to hide the application and leave the commandTextField visible
	 */
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	// remember to write unit test as you code
	private class CommandEntryTextFieldActionListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent evt) {
			
			String commandString = commandEntryTextField.getText();
			//for the case where user exits ToDoLog
			if (commandString.equalsIgnoreCase("exit")) {
				exitProgram();
			}
			
			//this is where ToDoLog takes in the user's value
			Controller.acceptUserCommand(commandString);
			commandEntryTextField.setText("");
			
			//feedback is sent to the dynamicHelpText to assist the user in using ToDoLog
			helpText.setText(Controller.getFeedback());	
			scheduleTableItems = Controller.getAllTasksInViewList();
			flexibleTableItems = Controller.getFlexibleList();
			
			//to inform the user which sets of tasks ToDoLog will be displaying
			scheduleTableLabel.setText(Controller.getViewOrSearchType());
			
			//constantly changes the table model and updates the changes
			scheduleTableModel.setTableData(scheduleTableItems);
			scheduleTableModel.fireTableDataChanged();
			flexibleTableModel.setTableData(flexibleTableItems);
			flexibleTableModel.fireTableDataChanged();
			//I want the toDoListItems to show the previous screen if the next screen has no more items to display
			flipPages();
		}
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	private void flipPages() {
		if (focusTable == scheduleTable) {
			if (Controller.getFocusTask() == null) {
				((ToDoLogTableModel) focusTable.getModel()).goToPage(0);
				return;
			}
			Task focusTask = Controller.getFocusTask();
			//boolean found = false;
			for (int index = 0; index < scheduleTableItems.size(); index ++){
				Task task = scheduleTableItems.get(index);
				if (task == focusTask) {
					
					((ToDoLogTableModel) focusTable.getModel()).goToPage((index)/TABLE_PAGE_SIZE);
				//	found = true;
					
				}
			}
		} else {
			if (Controller.getFocusTask() == null) {
				((ToDoLogTableModel) focusTable.getModel()).goToPage(0);
				return;
			}
			Task focusTask = Controller.getFocusTask();
			//boolean found = false;
			for (int index = 0; index < flexibleTableItems.size(); index ++){
				Task task = flexibleTableItems.get(index);
				if (task == focusTask) {
					
					((ToDoLogTableModel) focusTable.getModel()).goToPage((index)/TABLE_PAGE_SIZE);
				//	found = true;

				}
			}
		}
		Log.debug("Change the pages and focus table to where the focus task is");
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	private class CommandEntryTextFieldKeyListener implements KeyListener {
		@Override
		public void keyPressed(KeyEvent e) {
			int keyCode = e.getKeyCode();
			
			//press the pageup and pagedown buttons to look through the pages of
			//the user's tasks
			if ((keyCode == KeyEvent.VK_PAGE_UP) || (keyCode == KeyEvent.VK_F9)){
				((ToDoLogTableModel) focusTable.getModel()).pageUp();
				Log.info("Page up pressed");
			}
			if ((keyCode == KeyEvent.VK_PAGE_DOWN) || (keyCode == KeyEvent.VK_F10)){
				((ToDoLogTableModel) focusTable.getModel()).pageDown();
				Log.info("Page down pressed");
			}
			
			//press the arrow keys to look through past user inputs
			if (keyCode == KeyEvent.VK_UP){
				try {
					commandEntryTextField.setText(Controller.getInput().getBackwards());
					Log.info("Up pressed");
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
			
			if (keyCode == KeyEvent.VK_DOWN){
				try {
					commandEntryTextField.setText(Controller.getInput().getForwards());
					Log.info("Down pressed");
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
			
			//press tab to switch focus between the two tables
			if ((keyCode == KeyEvent.VK_TAB)) {
				toggleFocusTable();
				Log.info("Tab pressed");
			}
		}
	
		@Override
		public void keyReleased(KeyEvent e) {
			
		}
			
		@Override
		public void keyTyped(KeyEvent e){

		}
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	/*the two mouseListener classes below enable the user to drag ToDoLog around 
	 *the computer screen
	 */
	private class ScreenDraggingMouseListener implements MouseListener {
	
			@Override
			public void mousePressed(final MouseEvent e) {
				
				draggingOffsetPoint = new Point();
				draggingOffsetPoint.setLocation(e.getPoint());
				Log.info("Start dragging");
			}
			
			@Override
			public void mouseReleased(final MouseEvent e){
				
			}
			
			@Override
			public void mouseClicked(final MouseEvent e){
				
			}
			
			@Override
			public void mouseEntered(final MouseEvent e){
				
			}
			
			@Override
			public void mouseExited(final MouseEvent e){
				
			}
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	private class ScreenDraggingMouseMotionListener implements MouseMotionListener{
        @Override
        public void mouseDragged(final MouseEvent e) {
            window.setLocation(e.getXOnScreen()-draggingOffsetPoint.x, e.getYOnScreen()-draggingOffsetPoint.y);
        }
		
        @Override
        public void mouseMoved(final MouseEvent e){
        	
        }
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	/*this method is to set up the parameters of the gridbagconstraints
	to put the different panels into the right positions on the JFrame
	here we use the constructor GridBagConstraints(gridx,gridy,gridwidth,gridheight,weightx,weighty,anchor,fill,insets,ipadx,ipady)
	*/
	private GridBagConstraints setParameters(int panelParameters){
		GridBagConstraints parameters;
		Insets topPanelInsets = new Insets(0,0,0,0);
		Insets bottomPanelInsets = new Insets(0,0,0,0);
		Insets buttonPanelInsets = new Insets(0,0,0,0);
		Insets iconInsets = new Insets(10,30,0,0);
		Insets clockInsets = new Insets(15,0,0,53);
		Insets toDoListHolderInsets = new Insets(10,0,0,0);
		Insets toDoTableInsets = new Insets(0,0,0,0);
		Insets floatingTasksTableInsets = new Insets(0,10,0,0);
		Insets commandEntryTextFieldInsets = new Insets(10,25,5,25);
		Insets dynamicHelpTextInsets = new Insets(10,25,10,20);
		Insets toDoTableLabelInsets= new Insets(0,0,0,205);
		Insets floatingTasksTableLabelInsets= new Insets(0,10,0,60);
		if(panelParameters == ID_CLOCK_PANEL){
			parameters = new GridBagConstraints(1,0,1,1,0.1,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,clockInsets,0,0);
			return parameters;
		}
		else if(panelParameters == ID_TABLES_HOLDER){
			parameters = new GridBagConstraints(0,1,3,4,0.1,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,toDoListHolderInsets,0,0);
			return parameters;
		}
		else if(panelParameters == ID_TOP_PANEL){
			parameters = new GridBagConstraints(0,0,1,1,0.1,0.0,GridBagConstraints.NORTHEAST,GridBagConstraints.BOTH,topPanelInsets,0,0);
			return parameters;
		}
		else if(panelParameters == ID_TOP_RIGHT_BUTTONS_PANEL){
			parameters = new GridBagConstraints(2,0,1,1,0.2,0.0,GridBagConstraints.NORTHEAST,GridBagConstraints.BOTH,buttonPanelInsets,0,0);
			return parameters;
		}
		else if(panelParameters == ID_ICON_PANEL){
			parameters = new GridBagConstraints(0,0,1,1,0.2,0.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,iconInsets,0,0);
			return parameters;
		}
		else if(panelParameters == ID_BOTTOM_PANEL){
			parameters = new GridBagConstraints(0,5,3,3,0.0,0.3,GridBagConstraints.CENTER,GridBagConstraints.BOTH,bottomPanelInsets,0,0);
			return parameters;
		}
		
		
		else if(panelParameters == ID_COMMAND_ENTRY_TEXT_FIELD){
			parameters = new GridBagConstraints(0,0,3,1,0.1,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,commandEntryTextFieldInsets,0,0);
			
			return parameters;
		}
		
		else if(panelParameters == ID_HELP_TEXT_AREA){
			parameters = new GridBagConstraints(0,1,3,1,0.0,0.1,GridBagConstraints.CENTER,GridBagConstraints.BOTH,dynamicHelpTextInsets,0,0);
			return parameters;
		}
		
		else if(panelParameters == ID_SCHEDULE_TABLE){
			parameters = new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,toDoTableInsets,0,0);
			return parameters;
		} else if (panelParameters == ID_FLEXIBLE_TABLE) {
			parameters = new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.BOTH,floatingTasksTableInsets,0,0);
			return parameters;
		} else if (panelParameters == ID_SCHEDULE_TABLE_LABEL) {
			
			parameters = new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.BOTH,toDoTableLabelInsets,0,0);
			return parameters;
		} else if (panelParameters == ID_FLEXIBLE_TABLE_LABEL) {
			parameters = new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.BOTH,floatingTasksTableLabelInsets,0,0);
			return parameters;
		}
		return null;
	} 
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	/*	adjust and fix the width of the columns of the toDoTaskTable
	 */	
	private void adjustToDoTaskTableColumns(JTable toDoListTable){
		TableColumn tableColumn = null;
		
		for(int columnHeaders = 0; columnHeaders < 7;columnHeaders++){
			tableColumn = toDoListTable.getColumnModel().getColumn(columnHeaders);
			
			switch(columnHeaders){
			case 0:
				tableColumn.setPreferredWidth(30);
				break;
			case 1:
				tableColumn.setPreferredWidth(130);
				break;
			case 2:
				tableColumn.setPreferredWidth(150);
				break;
			case 3:
				tableColumn.setPreferredWidth(0);
				tableColumn.setMinWidth(0);
				tableColumn.setMaxWidth(0);
				break;
			case 4:
				tableColumn.setPreferredWidth(90);
				break;
			case 5:
				tableColumn.setPreferredWidth(0);
				tableColumn.setMinWidth(0);
				tableColumn.setMaxWidth(0);
				break;
			case 6:
				tableColumn.setPreferredWidth(0);
				tableColumn.setMinWidth(0);
				tableColumn.setMaxWidth(0);
				tableColumn.setWidth(0);
				break;
			}
		}
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	//adjust the width of the floatingTaskTable's columns
	private void adjustFloatingTaskTableColumns(JTable floatingListTable){
		TableColumn tableColumn = null;
		
		for(int columnHeaders = 0; columnHeaders < 7;columnHeaders++){
			tableColumn = floatingListTable.getColumnModel().getColumn(columnHeaders);
			
			switch(columnHeaders){
			case 0:
				tableColumn.setPreferredWidth(35);
				break;
			case 1:
				tableColumn.setPreferredWidth(145);
				break;
			case 2:
				tableColumn.setPreferredWidth(0);
				tableColumn.setMinWidth(0);
				tableColumn.setMaxWidth(0);
				tableColumn.setWidth(0);
				break;
			case 3:
				tableColumn.setPreferredWidth(0);
				tableColumn.setMinWidth(0);
				tableColumn.setMaxWidth(0);
				tableColumn.setWidth(0);
				break;
			case 4:
				tableColumn.setPreferredWidth(0);
				tableColumn.setMinWidth(0);
				tableColumn.setMaxWidth(0);
				tableColumn.setWidth(0);
				break;
			case 5:
				tableColumn.setPreferredWidth(0);
				tableColumn.setMinWidth(0);
				tableColumn.setMaxWidth(0);
				tableColumn.setWidth(0);
				break;
			case 6:
				tableColumn.setPreferredWidth(0);
				tableColumn.setMinWidth(0);
				tableColumn.setMaxWidth(0);
				tableColumn.setWidth(0);
				break;
			}
		}
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	//a renderer to change the color of the rows of the table to show different priorities
	private void changeToDoTableColors(JTable toDoListTable, DefaultTableCellRenderer renderer){
		toDoListTable.getColumnModel().getColumn(0).setCellRenderer(renderer);
		toDoListTable.getColumnModel().getColumn(1).setCellRenderer(renderer);
		toDoListTable.getColumnModel().getColumn(2).setCellRenderer(renderer);
		toDoListTable.getColumnModel().getColumn(3).setCellRenderer(renderer);
		toDoListTable.getColumnModel().getColumn(4).setCellRenderer(renderer);	
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	private void changeFloatingTableColors(JTable toDoListTable, DefaultTableCellRenderer renderer){
		toDoListTable.getColumnModel().getColumn(0).setCellRenderer(renderer);
		toDoListTable.getColumnModel().getColumn(1).setCellRenderer(renderer);
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	private void hideWindowExceptCommandEntry() {
		if(isInvisible == false){
			commandEntryTextField.setBorder(new LineBorder(new Color(34,167,240),4,true));
			backgroundLabel.setIcon(null);
			iconPanel.setIcon(null);
			minimizeButton.setVisible(false);
			closeButton.setVisible(false);
			window.setBackground(new Color(255,255,255,20));

			//hide dynamicHelpText
			
			helpText.setBackground(new Color(255,255,255,0));
			helpText.setBorder(null);
			helpText.setForeground(new Color(255,255,255,0));
			
			scheduleTableLabel.setBackground(new Color(255,255,255,20));
			scheduleTableLabel.setForeground(new Color(255,255,255,20));
			scheduleTableLabel.setBorder(null);
			
			flexibleTableLabel.setBackground(new Color(255,255,255,20));
			flexibleTableLabel.setForeground(new Color(255,255,255,20));
			flexibleTableLabel.setBorder(null);
			
			scheduleTableScrollPane.setBackground(new Color(255,255,255,20));
			scheduleTableScrollPane.setBorder(null);
			scheduleTable.setForeground(new Color(255,255,255,20));
			scheduleTable.getTableHeader().setForeground(new Color(255,255,255,20));
			changeToDoTableColors(scheduleTable,new InvisibleRenderer());
			flexibleTableScrollPane.setBackground(new Color(255,255,255,20));
			flexibleTableScrollPane.setBorder(null);
			flexibleTable.setForeground(new Color(255,255,255,20));
			flexibleTable.getTableHeader().setForeground(new Color(255,255,255,20));
			changeFloatingTableColors(flexibleTable,new InvisibleRenderer());
			clock.getTime().setForeground(new Color(255,255,255,20));
			
			isInvisible = true;
			Log.info("Set into stealth mode");
		}else{
                //make everything reappear with the same hotkey
			commandEntryTextField.setBorder(new LineBorder(new Color(34,167,240),2,true));
			backgroundLabel.setIcon(new ImageIcon(backgroundImage));
			iconPanel.setIcon(new ImageIcon(iconUrl));
			minimizeButton.setVisible(true);
			closeButton.setVisible(true);
			window.setBackground(new Color(255,255,255,255));

			//hide dynamicHelpText
			helpText.setBackground(new Color(255,255,255,255));
			helpText.setBorder(new LineBorder(Color.GRAY));
			helpText.setForeground(new Color(0,0,0,255));
			
			scheduleTableScrollPane.setBackground(new Color(255,255,255,220));
			
			
			scheduleTableLabel.setBackground(new Color(255,255,255,220));
			scheduleTableLabel.setForeground(new Color(0,0,0,255));
			
			flexibleTableLabel.setBackground(new Color(255,255,255,220));
			flexibleTableLabel.setForeground(new Color(0,0,0,255));
          
			scheduleTable.setForeground(Color.BLACK);
			scheduleTable.getTableHeader().setForeground(Color.BLACK);
			flexibleTableScrollPane.setBackground(new Color(255,255,255,220));
			flexibleTable.setForeground(Color.BLACK);
			flexibleTable.getTableHeader().setForeground(Color.BLACK);
			clock.getTime().setForeground(Color.WHITE);
			changeToDoTableColors(scheduleTable,new CustomRenderer());
			changeFloatingTableColors(flexibleTable,new CustomRenderer());
			isInvisible = false;
			toggleFocusTable();toggleFocusTable();
			Log.info("Exit stealth mode");
		}
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java
	 */

	private void showOrHideWindow() {
		if (window.getState() == JFrame.ICONIFIED) {
			window.setState(JFrame.NORMAL);
			window.setVisible(true);
			
		} else {
			if (isInvisible) {
				hideWindowExceptCommandEntry();
			}
			window.setState(JFrame.ICONIFIED);
			window.dispose();
			
		}
	}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\gui\UserInterface.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\test\FileStorageTest.java
	 */

	private Task createRandomTimedTask() {
		//TODO
		char[] chars = "abcdefghijklmnopqrstuvwxyz01123456789".toCharArray();
		StringBuilder sb = new StringBuilder();
		Random random = new Random();
		for (int i = 0; i < 20; i++) {
		    char c = chars[random.nextInt(chars.length)];
		    sb.append(c);
		}
		String name = sb.toString();
		return new Task(TaskType.TIMED, name, new DateTime(2014,12,2,8,0),new DateTime(2014,12,2,23,59),false,"Bob","SOC");
	}
	
	// End of segment: C:\Users\Ben\New folder\TodoLog\src\test\FileStorageTest.java





	/**
	 * origin: C:\Users\Ben\New folder\TodoLog\src\test\FileStorageTest.java
	 */

	private Task createRandomDeadlineTask() {
		//TODO
		char[] chars = "abcdefghijklmnopqrstuvwxyz01123456789".toCharArray();
		StringBuilder sb = new StringBuilder();
		Random random = new Random();
		for (int i = 0; i < 20; i++) {
		    char c = chars[random.nextInt(chars.length)];
		    sb.append(c);
		}
		String name = sb.toString();
		return new Task(TaskType.DEADLINE, name,new DateTime(2014,12,2,23,59), false,"Bob","SOC");
	}
}

	// End of segment: C:\Users\Ben\New folder\TodoLog\src\test\FileStorageTest.java





